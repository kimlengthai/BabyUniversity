{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport EventManager from './EventManager';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { EventTypes } from '../interfaces';\nimport { PointerTypeMapping, isPointerInBounds } from '../utils';\nimport { PointerType } from '../../PointerType';\nvar POINTER_CAPTURE_EXCLUDE_LIST = new Set(['SELECT', 'INPUT']);\nvar PointerTypes = {\n  Touch: 'touch',\n  Stylus: 'pen'\n};\nvar PointerEventManager = function (_EventManager) {\n  _inherits(PointerEventManager, _EventManager);\n  function PointerEventManager(view) {\n    var _this;\n    _classCallCheck(this, PointerEventManager);\n    _this = _callSuper(this, PointerEventManager, [view]);\n    _defineProperty(_assertThisInitialized(_this), \"trackedPointers\", new Set());\n    _defineProperty(_assertThisInitialized(_this), \"mouseButtonsMapper\", new Map());\n    _defineProperty(_assertThisInitialized(_this), \"lastPosition\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"pointerDownCallback\", function (event) {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      if (!isPointerInBounds(_this.view, {\n        x: event.clientX,\n        y: event.clientY\n      })) {\n        return;\n      }\n      var adaptedEvent = _this.mapEvent(event, EventTypes.DOWN);\n      var target = event.target;\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(adaptedEvent.pointerId);\n      }\n      _this.markAsInBounds(adaptedEvent.pointerId);\n      _this.trackedPointers.add(adaptedEvent.pointerId);\n      if (++_this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        _this.onPointerAdd(adaptedEvent);\n      } else {\n        _this.onPointerDown(adaptedEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"pointerUpCallback\", function (event) {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      if (_this.activePointersCounter === 0) {\n        return;\n      }\n      var adaptedEvent = _this.mapEvent(event, EventTypes.UP);\n      var target = event.target;\n      if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.releasePointerCapture(adaptedEvent.pointerId);\n      }\n      _this.markAsOutOfBounds(adaptedEvent.pointerId);\n      _this.trackedPointers.delete(adaptedEvent.pointerId);\n      if (--_this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        _this.onPointerRemove(adaptedEvent);\n      } else {\n        _this.onPointerUp(adaptedEvent);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"pointerMoveCallback\", function (event) {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      if (event.pointerType === PointerTypes.Stylus && event.x === _this.lastPosition.x && event.y === _this.lastPosition.y) {\n        return;\n      }\n      var adaptedEvent = _this.mapEvent(event, EventTypes.MOVE);\n      var target = event.target;\n      if (!target.hasPointerCapture(event.pointerId) && !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n        target.setPointerCapture(event.pointerId);\n      }\n      var inBounds = isPointerInBounds(_this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y\n      });\n      var pointerIndex = _this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          _this.onPointerEnter(adaptedEvent);\n          _this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          _this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          _this.onPointerLeave(adaptedEvent);\n          _this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          _this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n      _this.lastPosition.x = event.x;\n      _this.lastPosition.y = event.y;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"pointerCancelCallback\", function (event) {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      var adaptedEvent = _this.mapEvent(event, EventTypes.CANCEL);\n      _this.onPointerCancel(adaptedEvent);\n      _this.markAsOutOfBounds(adaptedEvent.pointerId);\n      _this.activePointersCounter = 0;\n      _this.trackedPointers.clear();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"pointerEnterCallback\", function (event) {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      var adaptedEvent = _this.mapEvent(event, EventTypes.ENTER);\n      _this.onPointerMoveOver(adaptedEvent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"pointerLeaveCallback\", function (event) {\n      if (event.pointerType === PointerTypes.Touch) {\n        return;\n      }\n      var adaptedEvent = _this.mapEvent(event, EventTypes.LEAVE);\n      _this.onPointerMoveOut(adaptedEvent);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"lostPointerCaptureCallback\", function (event) {\n      var adaptedEvent = _this.mapEvent(event, EventTypes.CANCEL);\n      if (_this.trackedPointers.has(adaptedEvent.pointerId)) {\n        _this.onPointerCancel(adaptedEvent);\n        _this.activePointersCounter = 0;\n        _this.trackedPointers.clear();\n      }\n    });\n    _this.mouseButtonsMapper.set(0, MouseButton.LEFT);\n    _this.mouseButtonsMapper.set(1, MouseButton.MIDDLE);\n    _this.mouseButtonsMapper.set(2, MouseButton.RIGHT);\n    _this.mouseButtonsMapper.set(3, MouseButton.BUTTON_4);\n    _this.mouseButtonsMapper.set(4, MouseButton.BUTTON_5);\n    _this.lastPosition = {\n      x: -Infinity,\n      y: -Infinity\n    };\n    return _this;\n  }\n  _createClass(PointerEventManager, [{\n    key: \"registerListeners\",\n    value: function registerListeners() {\n      this.view.addEventListener('pointerdown', this.pointerDownCallback);\n      this.view.addEventListener('pointerup', this.pointerUpCallback);\n      this.view.addEventListener('pointermove', this.pointerMoveCallback);\n      this.view.addEventListener('pointercancel', this.pointerCancelCallback);\n      this.view.addEventListener('pointerenter', this.pointerEnterCallback);\n      this.view.addEventListener('pointerleave', this.pointerLeaveCallback);\n      this.view.addEventListener('lostpointercapture', this.lostPointerCaptureCallback);\n    }\n  }, {\n    key: \"unregisterListeners\",\n    value: function unregisterListeners() {\n      this.view.removeEventListener('pointerdown', this.pointerDownCallback);\n      this.view.removeEventListener('pointerup', this.pointerUpCallback);\n      this.view.removeEventListener('pointermove', this.pointerMoveCallback);\n      this.view.removeEventListener('pointercancel', this.pointerCancelCallback);\n      this.view.removeEventListener('pointerenter', this.pointerEnterCallback);\n      this.view.removeEventListener('pointerleave', this.pointerLeaveCallback);\n      this.view.removeEventListener('lostpointercapture', this.lostPointerCaptureCallback);\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      var _PointerTypeMapping$g;\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: (_PointerTypeMapping$g = PointerTypeMapping.get(event.pointerType)) !== null && _PointerTypeMapping$g !== void 0 ? _PointerTypeMapping$g : PointerType.OTHER,\n        button: this.mouseButtonsMapper.get(event.button),\n        time: event.timeStamp\n      };\n    }\n  }, {\n    key: \"resetManager\",\n    value: function resetManager() {\n      _get(_getPrototypeOf(PointerEventManager.prototype), \"resetManager\", this).call(this);\n      this.trackedPointers.clear();\n    }\n  }]);\n  return PointerEventManager;\n}(EventManager);\nexport { PointerEventManager as default };","map":{"version":3,"names":["EventManager","MouseButton","EventTypes","PointerTypeMapping","isPointerInBounds","PointerType","POINTER_CAPTURE_EXCLUDE_LIST","Set","PointerTypes","Touch","Stylus","PointerEventManager","_EventManager","_inherits","view","_this","_classCallCheck","_callSuper","_defineProperty","_assertThisInitialized","Map","event","pointerType","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","has","tagName","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","lastPosition","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","mouseButtonsMapper","set","LEFT","MIDDLE","RIGHT","BUTTON_4","BUTTON_5","Infinity","_createClass","key","value","registerListeners","addEventListener","pointerDownCallback","pointerUpCallback","pointerMoveCallback","pointerCancelCallback","pointerEnterCallback","pointerLeaveCallback","lostPointerCaptureCallback","unregisterListeners","removeEventListener","_PointerTypeMapping$g","offsetX","offsetY","get","OTHER","button","time","timeStamp","resetManager","_get","_getPrototypeOf","prototype","call","default"],"sources":["C:\\Users\\tcdin\\Desktop\\BabyUniversity\\front-end\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\PointerEventManager.ts"],"sourcesContent":["import EventManager from './EventManager';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { AdaptedEvent, EventTypes, Point } from '../interfaces';\nimport { PointerTypeMapping, isPointerInBounds } from '../utils';\nimport { PointerType } from '../../PointerType';\n\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set<string>(['SELECT', 'INPUT']);\nconst PointerTypes = {\n  Touch: 'touch',\n  Stylus: 'pen',\n};\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n  private readonly mouseButtonsMapper = new Map<number, MouseButton>();\n  private lastPosition: Point;\n\n  constructor(view: HTMLElement) {\n    super(view);\n\n    this.mouseButtonsMapper.set(0, MouseButton.LEFT);\n    this.mouseButtonsMapper.set(1, MouseButton.MIDDLE);\n    this.mouseButtonsMapper.set(2, MouseButton.RIGHT);\n    this.mouseButtonsMapper.set(3, MouseButton.BUTTON_4);\n    this.mouseButtonsMapper.set(4, MouseButton.BUTTON_5);\n\n    this.lastPosition = {\n      x: -Infinity,\n      y: -Infinity,\n    };\n  }\n\n  private pointerDownCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n    if (!isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.setPointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsInBounds(adaptedEvent.pointerId);\n    this.trackedPointers.add(adaptedEvent.pointerId);\n\n    if (++this.activePointersCounter > 1) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n      this.onPointerAdd(adaptedEvent);\n    } else {\n      this.onPointerDown(adaptedEvent);\n    }\n  };\n\n  private pointerUpCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    // When we call reset on gesture handlers, it also resets their event managers\n    // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n    // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n    // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n    if (this.activePointersCounter === 0) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.releasePointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.trackedPointers.delete(adaptedEvent.pointerId);\n\n    if (--this.activePointersCounter > 0) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n      this.onPointerRemove(adaptedEvent);\n    } else {\n      this.onPointerUp(adaptedEvent);\n    }\n  };\n\n  private pointerMoveCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    // Stylus triggers `pointermove` event when it detects changes in pressure. Since it is very sensitive to those changes,\n    // it constantly sends events, even though there was no change in position. To fix that we check whether\n    // pointer has actually moved and if not, we do not send event.\n    if (\n      event.pointerType === PointerTypes.Stylus &&\n      event.x === this.lastPosition.x &&\n      event.y === this.lastPosition.y\n    ) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n    const target = event.target as HTMLElement;\n\n    // You may be wondering why are we setting pointer capture here, when we\n    // already set it in `pointerdown` handler. Well, that's a great question,\n    // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n    // says that the requirement for `setPointerCapture` to work is that pointer\n    // must be in 'active buttons state`, otherwise it will fail silently, which\n    // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n    // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n    // will succeed, for some reason. Since it fails silently, we don't actually know\n    // if it worked or not (there's `gotpointercapture` event, but the complexity of\n    // incorporating it here seems stupid), so we just call it again here, every time\n    // pointer moves until it succeeds.\n    // God, I do love web development.\n    if (\n      !target.hasPointerCapture(event.pointerId) &&\n      !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)\n    ) {\n      target.setPointerCapture(event.pointerId);\n    }\n\n    const inBounds: boolean = isPointerInBounds(this.view, {\n      x: adaptedEvent.x,\n      y: adaptedEvent.y,\n    });\n\n    const pointerIndex: number = this.pointersInBounds.indexOf(\n      adaptedEvent.pointerId\n    );\n\n    if (inBounds) {\n      if (pointerIndex < 0) {\n        adaptedEvent.eventType = EventTypes.ENTER;\n        this.onPointerEnter(adaptedEvent);\n        this.markAsInBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerMove(adaptedEvent);\n      }\n    } else {\n      if (pointerIndex >= 0) {\n        adaptedEvent.eventType = EventTypes.LEAVE;\n        this.onPointerLeave(adaptedEvent);\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerOutOfBounds(adaptedEvent);\n      }\n    }\n\n    this.lastPosition.x = event.x;\n    this.lastPosition.y = event.y;\n  };\n\n  private pointerCancelCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    this.onPointerCancel(adaptedEvent);\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.activePointersCounter = 0;\n    this.trackedPointers.clear();\n  };\n\n  private pointerEnterCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n    this.onPointerMoveOver(adaptedEvent);\n  };\n\n  private pointerLeaveCallback = (event: PointerEvent) => {\n    if (event.pointerType === PointerTypes.Touch) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n    this.onPointerMoveOut(adaptedEvent);\n  };\n\n  private lostPointerCaptureCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n      // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n      // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n      this.onPointerCancel(adaptedEvent);\n\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    }\n  };\n\n  public registerListeners(): void {\n    this.view.addEventListener('pointerdown', this.pointerDownCallback);\n    this.view.addEventListener('pointerup', this.pointerUpCallback);\n    this.view.addEventListener('pointermove', this.pointerMoveCallback);\n    this.view.addEventListener('pointercancel', this.pointerCancelCallback);\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n    this.view.addEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.addEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.addEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  public unregisterListeners(): void {\n    this.view.removeEventListener('pointerdown', this.pointerDownCallback);\n    this.view.removeEventListener('pointerup', this.pointerUpCallback);\n    this.view.removeEventListener('pointermove', this.pointerMoveCallback);\n    this.view.removeEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.removeEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.removeEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.removeEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType:\n        PointerTypeMapping.get(event.pointerType) ?? PointerType.OTHER,\n      button: this.mouseButtonsMapper.get(event.button),\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}