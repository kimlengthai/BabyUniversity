{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { State } from '../../State';\nvar InteractionManager = function () {\n  function InteractionManager() {\n    _classCallCheck(this, InteractionManager);\n    _defineProperty(this, \"waitForRelations\", new Map());\n    _defineProperty(this, \"simultaneousRelations\", new Map());\n    _defineProperty(this, \"blocksHandlersRelations\", new Map());\n  }\n  _createClass(InteractionManager, [{\n    key: \"configureInteractions\",\n    value: function configureInteractions(handler, config) {\n      this.dropRelationsForHandlerWithTag(handler.getTag());\n      if (config.waitFor) {\n        var waitFor = [];\n        config.waitFor.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            waitFor.push(otherHandler);\n          } else {\n            waitFor.push(otherHandler.handlerTag);\n          }\n        });\n        this.waitForRelations.set(handler.getTag(), waitFor);\n      }\n      if (config.simultaneousHandlers) {\n        var simultaneousHandlers = [];\n        config.simultaneousHandlers.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            simultaneousHandlers.push(otherHandler);\n          } else {\n            simultaneousHandlers.push(otherHandler.handlerTag);\n          }\n        });\n        this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n      }\n      if (config.blocksHandlers) {\n        var blocksHandlers = [];\n        config.blocksHandlers.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            blocksHandlers.push(otherHandler);\n          } else {\n            blocksHandlers.push(otherHandler.handlerTag);\n          }\n        });\n        this.blocksHandlersRelations.set(handler.getTag(), blocksHandlers);\n      }\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler, otherHandler) {\n      var waitFor = this.waitForRelations.get(handler.getTag());\n      return (waitFor === null || waitFor === void 0 ? void 0 : waitFor.find(function (tag) {\n        return tag === otherHandler.getTag();\n      })) !== undefined;\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler, otherHandler) {\n      var simultaneousHandlers = this.simultaneousRelations.get(handler.getTag());\n      return (simultaneousHandlers === null || simultaneousHandlers === void 0 ? void 0 : simultaneousHandlers.find(function (tag) {\n        return tag === otherHandler.getTag();\n      })) !== undefined;\n    }\n  }, {\n    key: \"shouldRequireHandlerToWaitForFailure\",\n    value: function shouldRequireHandlerToWaitForFailure(handler, otherHandler) {\n      var waitFor = this.blocksHandlersRelations.get(handler.getTag());\n      return (waitFor === null || waitFor === void 0 ? void 0 : waitFor.find(function (tag) {\n        return tag === otherHandler.getTag();\n      })) !== undefined;\n    }\n  }, {\n    key: \"shouldHandlerBeCancelledBy\",\n    value: function shouldHandlerBeCancelledBy(_handler, otherHandler) {\n      var _otherHandler$isButto;\n      var isNativeHandler = otherHandler.constructor.name === 'NativeViewGestureHandler';\n      var isActive = otherHandler.getState() === State.ACTIVE;\n      var isButton = ((_otherHandler$isButto = otherHandler.isButton) === null || _otherHandler$isButto === void 0 ? void 0 : _otherHandler$isButto.call(otherHandler)) === true;\n      return isNativeHandler && isActive && !isButton;\n    }\n  }, {\n    key: \"dropRelationsForHandlerWithTag\",\n    value: function dropRelationsForHandlerWithTag(handlerTag) {\n      this.waitForRelations.delete(handlerTag);\n      this.simultaneousRelations.delete(handlerTag);\n      this.blocksHandlersRelations.delete(handlerTag);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.waitForRelations.clear();\n      this.simultaneousRelations.clear();\n      this.blocksHandlersRelations.clear();\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this.instance) {\n        this.instance = new InteractionManager();\n      }\n      return this.instance;\n    }\n  }]);\n  return InteractionManager;\n}();\nexport { InteractionManager as default };\n_defineProperty(InteractionManager, \"instance\", void 0);","map":{"version":3,"names":["State","InteractionManager","_classCallCheck","_defineProperty","Map","_createClass","key","value","configureInteractions","handler","config","dropRelationsForHandlerWithTag","getTag","waitFor","forEach","otherHandler","push","handlerTag","waitForRelations","set","simultaneousHandlers","simultaneousRelations","blocksHandlers","blocksHandlersRelations","shouldWaitForHandlerFailure","get","find","tag","undefined","shouldRecognizeSimultaneously","shouldRequireHandlerToWaitForFailure","shouldHandlerBeCancelledBy","_handler","_otherHandler$isButto","isNativeHandler","constructor","name","isActive","getState","ACTIVE","isButton","call","delete","reset","clear","getInstance","instance","default"],"sources":["C:\\Users\\tcdin\\Desktop\\BabyUniversity\\front-end\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\InteractionManager.ts"],"sourcesContent":["import type IGestureHandler from '../handlers/IGestureHandler';\nimport { State } from '../../State';\nimport { Config, Handler } from '../interfaces';\n\nexport default class InteractionManager {\n  private static instance: InteractionManager;\n  private readonly waitForRelations: Map<number, number[]> = new Map();\n  private readonly simultaneousRelations: Map<number, number[]> = new Map();\n  private readonly blocksHandlersRelations: Map<number, number[]> = new Map();\n\n  // Private becaues of singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public configureInteractions(handler: IGestureHandler, config: Config) {\n    this.dropRelationsForHandlerWithTag(handler.getTag());\n\n    if (config.waitFor) {\n      const waitFor: number[] = [];\n      config.waitFor.forEach((otherHandler: Handler): void => {\n        // New API reference\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          // Old API reference\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.waitForRelations.set(handler.getTag(), waitFor);\n    }\n\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers: number[] = [];\n      config.simultaneousHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n    }\n\n    if (config.blocksHandlers) {\n      const blocksHandlers: number[] = [];\n      config.blocksHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          blocksHandlers.push(otherHandler);\n        } else {\n          blocksHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.blocksHandlersRelations.set(handler.getTag(), blocksHandlers);\n    }\n  }\n\n  public shouldWaitForHandlerFailure(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.waitForRelations.get(\n      handler.getTag()\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.getTag();\n      }) !== undefined\n    );\n  }\n\n  public shouldRecognizeSimultaneously(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const simultaneousHandlers: number[] | undefined =\n      this.simultaneousRelations.get(handler.getTag());\n\n    return (\n      simultaneousHandlers?.find((tag: number) => {\n        return tag === otherHandler.getTag();\n      }) !== undefined\n    );\n  }\n\n  public shouldRequireHandlerToWaitForFailure(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.blocksHandlersRelations.get(\n      handler.getTag()\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.getTag();\n      }) !== undefined\n    );\n  }\n\n  public shouldHandlerBeCancelledBy(\n    _handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    // We check constructor name instead of using `instanceof` in order do avoid circular dependencies\n    const isNativeHandler =\n      otherHandler.constructor.name === 'NativeViewGestureHandler';\n    const isActive = otherHandler.getState() === State.ACTIVE;\n    const isButton = otherHandler.isButton?.() === true;\n\n    return isNativeHandler && isActive && !isButton;\n  }\n\n  public dropRelationsForHandlerWithTag(handlerTag: number): void {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n    this.blocksHandlersRelations.delete(handlerTag);\n  }\n\n  public reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n    this.blocksHandlersRelations.clear();\n  }\n\n  public static getInstance(): InteractionManager {\n    if (!this.instance) {\n      this.instance = new InteractionManager();\n    }\n\n    return this.instance;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}