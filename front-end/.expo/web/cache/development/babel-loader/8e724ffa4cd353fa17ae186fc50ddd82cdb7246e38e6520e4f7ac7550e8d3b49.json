{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { EventTypes, TouchEventType } from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\nimport { PointerType } from '../../PointerType';\nvar TouchEventManager = function (_EventManager) {\n  _inherits(TouchEventManager, _EventManager);\n  function TouchEventManager() {\n    var _this;\n    _classCallCheck(this, TouchEventManager);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, TouchEventManager, [].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"touchStartCallback\", function (event) {\n      for (var i = 0; i < event.changedTouches.length; ++i) {\n        var adaptedEvent = _this.mapEvent(event, EventTypes.DOWN, i, TouchEventType.DOWN);\n        if (!isPointerInBounds(_this.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        }) || event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n        _this.markAsInBounds(adaptedEvent.pointerId);\n        if (++_this.activePointersCounter > 1) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n          _this.onPointerAdd(adaptedEvent);\n        } else {\n          _this.onPointerDown(adaptedEvent);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"touchMoveCallback\", function (event) {\n      for (var i = 0; i < event.changedTouches.length; ++i) {\n        var adaptedEvent = _this.mapEvent(event, EventTypes.MOVE, i, TouchEventType.MOVE);\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n        var inBounds = isPointerInBounds(_this.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n        var pointerIndex = _this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n            _this.onPointerEnter(adaptedEvent);\n            _this.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.LEAVE;\n            _this.onPointerLeave(adaptedEvent);\n            _this.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"touchEndCallback\", function (event) {\n      for (var i = 0; i < event.changedTouches.length; ++i) {\n        if (_this.activePointersCounter === 0) {\n          break;\n        }\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n        var adaptedEvent = _this.mapEvent(event, EventTypes.UP, i, TouchEventType.UP);\n        _this.markAsOutOfBounds(adaptedEvent.pointerId);\n        if (--_this.activePointersCounter > 0) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n          _this.onPointerRemove(adaptedEvent);\n        } else {\n          _this.onPointerUp(adaptedEvent);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"touchCancelCallback\", function (event) {\n      for (var i = 0; i < event.changedTouches.length; ++i) {\n        var adaptedEvent = _this.mapEvent(event, EventTypes.CANCEL, i, TouchEventType.CANCELLED);\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n        _this.onPointerCancel(adaptedEvent);\n        _this.markAsOutOfBounds(adaptedEvent.pointerId);\n        _this.activePointersCounter = 0;\n      }\n    });\n    return _this;\n  }\n  _createClass(TouchEventManager, [{\n    key: \"registerListeners\",\n    value: function registerListeners() {\n      this.view.addEventListener('touchstart', this.touchStartCallback);\n      this.view.addEventListener('touchmove', this.touchMoveCallback);\n      this.view.addEventListener('touchend', this.touchEndCallback);\n      this.view.addEventListener('touchcancel', this.touchCancelCallback);\n    }\n  }, {\n    key: \"unregisterListeners\",\n    value: function unregisterListeners() {\n      this.view.removeEventListener('touchstart', this.touchStartCallback);\n      this.view.removeEventListener('touchmove', this.touchMoveCallback);\n      this.view.removeEventListener('touchend', this.touchEndCallback);\n      this.view.removeEventListener('touchcancel', this.touchCancelCallback);\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType, index, touchEventType) {\n      var rect = this.view.getBoundingClientRect();\n      var clientX = event.changedTouches[index].clientX;\n      var clientY = event.changedTouches[index].clientY;\n      return {\n        x: clientX,\n        y: clientY,\n        offsetX: clientX - rect.left,\n        offsetY: clientY - rect.top,\n        pointerId: event.changedTouches[index].identifier,\n        eventType: eventType,\n        pointerType: PointerType.TOUCH,\n        time: event.timeStamp,\n        allTouches: event.touches,\n        changedTouches: event.changedTouches,\n        touchEventType: touchEventType\n      };\n    }\n  }]);\n  return TouchEventManager;\n}(EventManager);\nexport { TouchEventManager as default };","map":{"version":3,"names":["EventTypes","TouchEventType","EventManager","isPointerInBounds","PointerType","TouchEventManager","_EventManager","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_assertThisInitialized","event","i","changedTouches","adaptedEvent","mapEvent","DOWN","view","x","y","touchType","markAsInBounds","pointerId","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","MOVE","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","markAsOutOfBounds","onPointerOutOfBounds","UP","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","CANCEL","CANCELLED","onPointerCancel","_createClass","key","value","registerListeners","addEventListener","touchStartCallback","touchMoveCallback","touchEndCallback","touchCancelCallback","unregisterListeners","removeEventListener","index","touchEventType","rect","getBoundingClientRect","clientX","clientY","offsetX","left","offsetY","top","identifier","pointerType","TOUCH","time","timeStamp","allTouches","touches","default"],"sources":["C:\\Users\\tcdin\\Desktop\\BabyUniversity\\front-end\\node_modules\\react-native-gesture-handler\\lib\\module\\web\\tools\\TouchEventManager.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes, TouchEventType } from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\nimport { PointerType } from '../../PointerType';\n\nexport default class TouchEventManager extends EventManager<HTMLElement> {\n  private touchStartCallback = (event: TouchEvent): void => {\n    for (let i = 0; i < event.changedTouches.length; ++i) {\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.DOWN,\n        i,\n        TouchEventType.DOWN\n      );\n\n      // Here we skip stylus, because in case of anything different than touch we want to handle it by using PointerEvents\n      // If we leave stylus to send touch events, handlers will receive every action twice\n      if (\n        !isPointerInBounds(this.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y,\n        }) ||\n        //@ts-ignore touchType field does exist\n        event.changedTouches[i].touchType === 'stylus'\n      ) {\n        continue;\n      }\n\n      this.markAsInBounds(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    }\n  };\n\n  private touchMoveCallback = (event: TouchEvent): void => {\n    for (let i = 0; i < event.changedTouches.length; ++i) {\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.MOVE,\n        i,\n        TouchEventType.MOVE\n      );\n      //@ts-ignore touchType field does exist\n      if (event.changedTouches[i].touchType === 'stylus') {\n        continue;\n      }\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.LEAVE;\n          this.onPointerLeave(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    }\n  };\n\n  private touchEndCallback = (event: TouchEvent): void => {\n    for (let i = 0; i < event.changedTouches.length; ++i) {\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        break;\n      }\n\n      //@ts-ignore touchType field does exist\n      if (event.changedTouches[i].touchType === 'stylus') {\n        continue;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.UP,\n        i,\n        TouchEventType.UP\n      );\n\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    }\n  };\n\n  private touchCancelCallback = (event: TouchEvent): void => {\n    for (let i = 0; i < event.changedTouches.length; ++i) {\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL,\n        i,\n        TouchEventType.CANCELLED\n      );\n\n      //@ts-ignore touchType field does exist\n      if (event.changedTouches[i].touchType === 'stylus') {\n        continue;\n      }\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n    }\n  };\n\n  public registerListeners(): void {\n    this.view.addEventListener('touchstart', this.touchStartCallback);\n    this.view.addEventListener('touchmove', this.touchMoveCallback);\n    this.view.addEventListener('touchend', this.touchEndCallback);\n    this.view.addEventListener('touchcancel', this.touchCancelCallback);\n  }\n\n  public unregisterListeners(): void {\n    this.view.removeEventListener('touchstart', this.touchStartCallback);\n    this.view.removeEventListener('touchmove', this.touchMoveCallback);\n    this.view.removeEventListener('touchend', this.touchEndCallback);\n    this.view.removeEventListener('touchcancel', this.touchCancelCallback);\n  }\n\n  protected mapEvent(\n    event: TouchEvent,\n    eventType: EventTypes,\n    index: number,\n    touchEventType: TouchEventType\n  ): AdaptedEvent {\n    const rect = this.view.getBoundingClientRect();\n    const clientX = event.changedTouches[index].clientX;\n    const clientY = event.changedTouches[index].clientY;\n\n    return {\n      x: clientX,\n      y: clientY,\n      offsetX: clientX - rect.left,\n      offsetY: clientY - rect.top,\n      pointerId: event.changedTouches[index].identifier,\n      eventType: eventType,\n      pointerType: PointerType.TOUCH,\n      time: event.timeStamp,\n      allTouches: event.touches,\n      changedTouches: event.changedTouches,\n      touchEventType: touchEventType,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}