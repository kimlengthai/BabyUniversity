{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { isChromeDebugger, isJest, isWeb, isWindowAvailable } from '../PlatformChecker';\nimport { SensorType } from '../commonTypes';\nimport { mockedRequestAnimationFrame } from '../mockedRequestAnimationFrame';\nvar requestAnimationFrameImpl = isJest() || !globalThis.requestAnimationFrame ? mockedRequestAnimationFrame : globalThis.requestAnimationFrame;\nvar JSReanimated = function () {\n  function JSReanimated() {\n    var _this = this;\n    _classCallCheck(this, JSReanimated);\n    _defineProperty(this, \"nextSensorId\", 0);\n    _defineProperty(this, \"sensors\", new Map());\n    _defineProperty(this, \"platform\", undefined);\n    _defineProperty(this, \"getSensorCallback\", function (sensor, sensorType, eventHandler) {\n      switch (sensorType) {\n        case SensorType.ACCELEROMETER:\n        case SensorType.GRAVITY:\n          return function () {\n            var x = sensor.x,\n              y = sensor.y,\n              z = sensor.z;\n            if (_this.platform === Platform.WEB_ANDROID) {\n              var _ref = [-x, -y, -z];\n              x = _ref[0];\n              y = _ref[1];\n              z = _ref[2];\n            }\n            eventHandler({\n              x: x,\n              y: y,\n              z: z,\n              interfaceOrientation: 0\n            });\n          };\n        case SensorType.GYROSCOPE:\n        case SensorType.MAGNETIC_FIELD:\n          return function () {\n            var x = sensor.x,\n              y = sensor.y,\n              z = sensor.z;\n            eventHandler({\n              x: x,\n              y: y,\n              z: z,\n              interfaceOrientation: 0\n            });\n          };\n        case SensorType.ROTATION:\n          return function () {\n            var _sensor$quaternion = _slicedToArray(sensor.quaternion, 4),\n              qw = _sensor$quaternion[0],\n              qx = _sensor$quaternion[1],\n              qy = _sensor$quaternion[2],\n              qz = _sensor$quaternion[3];\n            if (_this.platform === Platform.WEB_ANDROID) {\n              var _ref2 = [qz, -qy];\n              qy = _ref2[0];\n              qz = _ref2[1];\n            }\n            var yaw = -Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);\n            var pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n            var roll = -Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);\n            eventHandler({\n              qw: qw,\n              qx: qx,\n              qy: qy,\n              qz: qz,\n              yaw: yaw,\n              pitch: pitch,\n              roll: roll,\n              interfaceOrientation: 0\n            });\n          };\n      }\n    });\n  }\n  _createClass(JSReanimated, [{\n    key: \"makeShareableClone\",\n    value: function makeShareableClone() {\n      throw new Error('[Reanimated] makeShareableClone should never be called in JSReanimated.');\n    }\n  }, {\n    key: \"scheduleOnUI\",\n    value: function scheduleOnUI(worklet) {\n      requestAnimationFrameImpl(worklet);\n    }\n  }, {\n    key: \"createWorkletRuntime\",\n    value: function createWorkletRuntime(_name, _initializer) {\n      throw new Error('[Reanimated] createWorkletRuntime is not available in JSReanimated.');\n    }\n  }, {\n    key: \"scheduleOnRuntime\",\n    value: function scheduleOnRuntime() {\n      throw new Error('[Reanimated] scheduleOnRuntime is not available in JSReanimated.');\n    }\n  }, {\n    key: \"registerEventHandler\",\n    value: function registerEventHandler(_eventHandler, _eventName, _emitterReactTag) {\n      throw new Error('[Reanimated] registerEventHandler is not available in JSReanimated.');\n    }\n  }, {\n    key: \"unregisterEventHandler\",\n    value: function unregisterEventHandler(_) {\n      throw new Error('[Reanimated] unregisterEventHandler is not available in JSReanimated.');\n    }\n  }, {\n    key: \"enableLayoutAnimations\",\n    value: function enableLayoutAnimations() {\n      if (isWeb()) {\n        console.warn('[Reanimated] Layout Animations are not supported on web yet.');\n      } else if (isJest()) {\n        console.warn('[Reanimated] Layout Animations are no-ops when using Jest.');\n      } else if (isChromeDebugger()) {\n        console.warn('[Reanimated] Layout Animations are no-ops when using Chrome Debugger.');\n      } else {\n        console.warn('[Reanimated] Layout Animations are not supported on this configuration.');\n      }\n    }\n  }, {\n    key: \"configureLayoutAnimationBatch\",\n    value: function configureLayoutAnimationBatch() {}\n  }, {\n    key: \"setShouldAnimateExitingForTag\",\n    value: function setShouldAnimateExitingForTag() {}\n  }, {\n    key: \"registerSensor\",\n    value: function registerSensor(sensorType, interval, _iosReferenceFrame, eventHandler) {\n      if (!isWindowAvailable()) {\n        return -1;\n      }\n      if (this.platform === undefined) {\n        this.detectPlatform();\n      }\n      if (!(this.getSensorName(sensorType) in window)) {\n        console.warn('[Reanimated] Sensor is not available.' + (isWeb() && location.protocol !== 'https:' ? ' Make sure you use secure origin with `npx expo start --web --https`.' : '') + (this.platform === Platform.WEB_IOS ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.' : ''));\n        return -1;\n      }\n      if (this.platform === undefined) {\n        this.detectPlatform();\n      }\n      var sensor = this.initializeSensor(sensorType, interval);\n      sensor.addEventListener('reading', this.getSensorCallback(sensor, sensorType, eventHandler));\n      sensor.start();\n      this.sensors.set(this.nextSensorId, sensor);\n      return this.nextSensorId++;\n    }\n  }, {\n    key: \"unregisterSensor\",\n    value: function unregisterSensor(id) {\n      var sensor = this.sensors.get(id);\n      if (sensor !== undefined) {\n        sensor.stop();\n        this.sensors.delete(id);\n      }\n    }\n  }, {\n    key: \"subscribeForKeyboardEvents\",\n    value: function subscribeForKeyboardEvents(_) {\n      if (isWeb()) {\n        console.warn('[Reanimated] useAnimatedKeyboard is not available on web yet.');\n      } else if (isJest()) {\n        console.warn('[Reanimated] useAnimatedKeyboard is not available when using Jest.');\n      } else if (isChromeDebugger()) {\n        console.warn('[Reanimated] useAnimatedKeyboard is not available when using Chrome Debugger.');\n      } else {\n        console.warn('[Reanimated] useAnimatedKeyboard is not available on this configuration.');\n      }\n      return -1;\n    }\n  }, {\n    key: \"unsubscribeFromKeyboardEvents\",\n    value: function unsubscribeFromKeyboardEvents(_) {}\n  }, {\n    key: \"initializeSensor\",\n    value: function initializeSensor(sensorType, interval) {\n      var config = interval <= 0 ? {\n        referenceFrame: 'device'\n      } : {\n        frequency: 1000 / interval\n      };\n      switch (sensorType) {\n        case SensorType.ACCELEROMETER:\n          return new window.Accelerometer(config);\n        case SensorType.GYROSCOPE:\n          return new window.Gyroscope(config);\n        case SensorType.GRAVITY:\n          return new window.GravitySensor(config);\n        case SensorType.MAGNETIC_FIELD:\n          return new window.Magnetometer(config);\n        case SensorType.ROTATION:\n          return new window.AbsoluteOrientationSensor(config);\n      }\n    }\n  }, {\n    key: \"getSensorName\",\n    value: function getSensorName(sensorType) {\n      switch (sensorType) {\n        case SensorType.ACCELEROMETER:\n          return 'Accelerometer';\n        case SensorType.GRAVITY:\n          return 'GravitySensor';\n        case SensorType.GYROSCOPE:\n          return 'Gyroscope';\n        case SensorType.MAGNETIC_FIELD:\n          return 'Magnetometer';\n        case SensorType.ROTATION:\n          return 'AbsoluteOrientationSensor';\n      }\n    }\n  }, {\n    key: \"detectPlatform\",\n    value: function detectPlatform() {\n      var userAgent = navigator.userAgent || navigator.vendor || window.opera;\n      if (userAgent === undefined) {\n        this.platform = Platform.UNKNOWN;\n      } else if (/iPad|iPhone|iPod/.test(userAgent)) {\n        this.platform = Platform.WEB_IOS;\n      } else if (/android/i.test(userAgent)) {\n        this.platform = Platform.WEB_ANDROID;\n      } else {\n        this.platform = Platform.WEB;\n      }\n    }\n  }, {\n    key: \"getViewProp\",\n    value: function getViewProp(_viewTag, _propName, _component, _callback) {\n      throw new Error('[Reanimated] getViewProp is not available in JSReanimated.');\n    }\n  }, {\n    key: \"configureProps\",\n    value: function configureProps() {\n      throw new Error('[Reanimated] configureProps is not available in JSReanimated.');\n    }\n  }, {\n    key: \"executeOnUIRuntimeSync\",\n    value: function executeOnUIRuntimeSync(_shareable) {\n      throw new Error('[Reanimated] `executeOnUIRuntimeSync` is not available in JSReanimated.');\n    }\n  }]);\n  return JSReanimated;\n}();\nexport { JSReanimated as default };\nvar Platform = function (Platform) {\n  Platform[\"WEB_IOS\"] = \"web iOS\";\n  Platform[\"WEB_ANDROID\"] = \"web Android\";\n  Platform[\"WEB\"] = \"web\";\n  Platform[\"UNKNOWN\"] = \"unknown\";\n  return Platform;\n}(Platform || {});","map":{"version":3,"names":["_slicedToArray","_classCallCheck","_createClass","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","isChromeDebugger","isJest","isWeb","isWindowAvailable","SensorType","mockedRequestAnimationFrame","requestAnimationFrameImpl","globalThis","requestAnimationFrame","JSReanimated","_this","Map","undefined","sensor","sensorType","eventHandler","ACCELEROMETER","GRAVITY","x","y","z","platform","Platform","WEB_ANDROID","_ref","interfaceOrientation","GYROSCOPE","MAGNETIC_FIELD","ROTATION","_sensor$quaternion","quaternion","qw","qx","qy","qz","_ref2","yaw","Math","atan2","pitch","sin","roll","makeShareableClone","Error","scheduleOnUI","worklet","createWorkletRuntime","_name","_initializer","scheduleOnRuntime","registerEventHandler","_eventHandler","_eventName","_emitterReactTag","unregisterEventHandler","_","enableLayoutAnimations","console","warn","configureLayoutAnimationBatch","setShouldAnimateExitingForTag","registerSensor","interval","_iosReferenceFrame","detectPlatform","getSensorName","window","location","protocol","WEB_IOS","initializeSensor","addEventListener","getSensorCallback","start","sensors","set","nextSensorId","unregisterSensor","id","get","stop","delete","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","config","referenceFrame","frequency","Accelerometer","Gyroscope","GravitySensor","Magnetometer","AbsoluteOrientationSensor","userAgent","navigator","vendor","opera","UNKNOWN","test","WEB","getViewProp","_viewTag","_propName","_component","_callback","configureProps","executeOnUIRuntimeSync","_shareable","default"],"sources":["C:\\Users\\tcdin\\Desktop\\BabyUniversity\\front-end\\node_modules\\react-native-reanimated\\lib\\module\\reanimated2\\js-reanimated\\JSReanimated.ts"],"sourcesContent":["'use strict';\nimport {\n  isChromeDebugger,\n  isJest,\n  isWeb,\n  isWindowAvailable,\n} from '../PlatformChecker';\nimport type { ShareableRef, Value3D, ValueRotation } from '../commonTypes';\nimport { SensorType } from '../commonTypes';\nimport type { WebSensor } from './WebSensor';\nimport { mockedRequestAnimationFrame } from '../mockedRequestAnimationFrame';\nimport type { WorkletRuntime } from '../runtimes';\n\n// In Node.js environments (like when static rendering with Expo Router)\n// requestAnimationFrame is unavailable, so we use our mock.\n// It also has to be mocked for Jest purposes (see `initializeUIRuntime`).\nconst requestAnimationFrameImpl =\n  isJest() || !globalThis.requestAnimationFrame\n    ? mockedRequestAnimationFrame\n    : globalThis.requestAnimationFrame;\n\nexport default class JSReanimated {\n  nextSensorId = 0;\n  sensors = new Map<number, WebSensor>();\n  platform?: Platform = undefined;\n\n  makeShareableClone<T>(): ShareableRef<T> {\n    throw new Error(\n      '[Reanimated] makeShareableClone should never be called in JSReanimated.'\n    );\n  }\n\n  scheduleOnUI<T>(worklet: ShareableRef<T>) {\n    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready\n    requestAnimationFrameImpl(worklet);\n  }\n\n  createWorkletRuntime(\n    _name: string,\n    _initializer: ShareableRef<() => void>\n  ): WorkletRuntime {\n    throw new Error(\n      '[Reanimated] createWorkletRuntime is not available in JSReanimated.'\n    );\n  }\n\n  scheduleOnRuntime() {\n    throw new Error(\n      '[Reanimated] scheduleOnRuntime is not available in JSReanimated.'\n    );\n  }\n\n  registerEventHandler<T>(\n    _eventHandler: ShareableRef<T>,\n    _eventName: string,\n    _emitterReactTag: number\n  ): number {\n    throw new Error(\n      '[Reanimated] registerEventHandler is not available in JSReanimated.'\n    );\n  }\n\n  unregisterEventHandler(_: number): void {\n    throw new Error(\n      '[Reanimated] unregisterEventHandler is not available in JSReanimated.'\n    );\n  }\n\n  enableLayoutAnimations() {\n    if (isWeb()) {\n      console.warn(\n        '[Reanimated] Layout Animations are not supported on web yet.'\n      );\n    } else if (isJest()) {\n      console.warn(\n        '[Reanimated] Layout Animations are no-ops when using Jest.'\n      );\n    } else if (isChromeDebugger()) {\n      console.warn(\n        '[Reanimated] Layout Animations are no-ops when using Chrome Debugger.'\n      );\n    } else {\n      console.warn(\n        '[Reanimated] Layout Animations are not supported on this configuration.'\n      );\n    }\n  }\n\n  configureLayoutAnimationBatch() {\n    // no-op\n  }\n\n  setShouldAnimateExitingForTag() {\n    // no-op\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    interval: number,\n    _iosReferenceFrame: number,\n    eventHandler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ): number {\n    if (!isWindowAvailable()) {\n      // the window object is unavailable when building the server portion of a site that uses SSG\n      // this check is here to ensure that the server build won't fail\n      return -1;\n    }\n\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n\n    if (!(this.getSensorName(sensorType) in window)) {\n      // https://w3c.github.io/sensors/#secure-context\n      console.warn(\n        '[Reanimated] Sensor is not available.' +\n          (isWeb() && location.protocol !== 'https:'\n            ? ' Make sure you use secure origin with `npx expo start --web --https`.'\n            : '') +\n          (this.platform === Platform.WEB_IOS\n            ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.'\n            : '')\n      );\n      return -1;\n    }\n\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n\n    const sensor: WebSensor = this.initializeSensor(sensorType, interval);\n    sensor.addEventListener(\n      'reading',\n      this.getSensorCallback(sensor, sensorType, eventHandler)\n    );\n    sensor.start();\n\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n\n  getSensorCallback = (\n    sensor: WebSensor,\n    sensorType: SensorType,\n    eventHandler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ) => {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n      case SensorType.GRAVITY:\n        return () => {\n          let { x, y, z } = sensor;\n\n          // Web Android sensors have a different coordinate system than iOS\n          if (this.platform === Platform.WEB_ANDROID) {\n            [x, y, z] = [-x, -y, -z];\n          }\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({ x, y, z, interfaceOrientation: 0 });\n        };\n      case SensorType.GYROSCOPE:\n      case SensorType.MAGNETIC_FIELD:\n        return () => {\n          const { x, y, z } = sensor;\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({ x, y, z, interfaceOrientation: 0 });\n        };\n      case SensorType.ROTATION:\n        return () => {\n          let [qw, qx, qy, qz] = sensor.quaternion;\n\n          // Android sensors have a different coordinate system than iOS\n          if (this.platform === Platform.WEB_ANDROID) {\n            [qy, qz] = [qz, -qy];\n          }\n\n          // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n          const yaw = -Math.atan2(\n            2.0 * (qy * qz + qw * qx),\n            qw * qw - qx * qx - qy * qy + qz * qz\n          );\n          const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n          const roll = -Math.atan2(\n            2.0 * (qx * qy + qw * qz),\n            qw * qw + qx * qx - qy * qy - qz * qz\n          );\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({\n            qw,\n            qx,\n            qy,\n            qz,\n            yaw,\n            pitch,\n            roll,\n            interfaceOrientation: 0,\n          });\n        };\n    }\n  };\n\n  unregisterSensor(id: number): void {\n    const sensor: WebSensor | undefined = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n\n  subscribeForKeyboardEvents(_: ShareableRef<number>): number {\n    if (isWeb()) {\n      console.warn(\n        '[Reanimated] useAnimatedKeyboard is not available on web yet.'\n      );\n    } else if (isJest()) {\n      console.warn(\n        '[Reanimated] useAnimatedKeyboard is not available when using Jest.'\n      );\n    } else if (isChromeDebugger()) {\n      console.warn(\n        '[Reanimated] useAnimatedKeyboard is not available when using Chrome Debugger.'\n      );\n    } else {\n      console.warn(\n        '[Reanimated] useAnimatedKeyboard is not available on this configuration.'\n      );\n    }\n    return -1;\n  }\n\n  unsubscribeFromKeyboardEvents(_: number): void {\n    // noop\n  }\n\n  initializeSensor(sensorType: SensorType, interval: number): WebSensor {\n    const config =\n      interval <= 0\n        ? { referenceFrame: 'device' }\n        : { frequency: 1000 / interval };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n\n  getSensorName(sensorType: SensorType): string {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n\n  detectPlatform() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (userAgent === undefined) {\n      this.platform = Platform.UNKNOWN;\n    } else if (/iPad|iPhone|iPod/.test(userAgent)) {\n      this.platform = Platform.WEB_IOS;\n    } else if (/android/i.test(userAgent)) {\n      this.platform = Platform.WEB_ANDROID;\n    } else {\n      this.platform = Platform.WEB;\n    }\n  }\n\n  getViewProp<T>(\n    _viewTag: number,\n    _propName: string,\n    _component?: React.Component,\n    _callback?: (result: T) => void\n  ): Promise<T> {\n    throw new Error(\n      '[Reanimated] getViewProp is not available in JSReanimated.'\n    );\n  }\n\n  configureProps() {\n    throw new Error(\n      '[Reanimated] configureProps is not available in JSReanimated.'\n    );\n  }\n\n  executeOnUIRuntimeSync<T, R>(_shareable: ShareableRef<T>): R {\n    throw new Error(\n      '[Reanimated] `executeOnUIRuntimeSync` is not available in JSReanimated.'\n    );\n  }\n}\n\nenum Platform {\n  WEB_IOS = 'web iOS',\n  WEB_ANDROID = 'web Android',\n  WEB = 'web',\n  UNKNOWN = 'unknown',\n}\n\ndeclare global {\n  interface Navigator {\n    userAgent?: string;\n    vendor?: string;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}