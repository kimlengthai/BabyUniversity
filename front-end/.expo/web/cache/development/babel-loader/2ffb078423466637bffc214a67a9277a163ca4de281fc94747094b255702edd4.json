{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { isValid, parseISO } from 'date-fns';\nexport function validateEmail(email) {\n  var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\nexport function validateFirstName(firstName) {\n  var nameRegex = /^[a-zA-Z]+$/;\n  return nameRegex.test(firstName);\n}\nexport function validateLastName(lastName) {\n  var nameRegex = /^[a-zA-Z]+$/;\n  return nameRegex.test(lastName);\n}\nexport function validateDOB(DOB) {\n  var dobRegex = /^(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[0-2])\\/\\d{4}$/;\n  return dobRegex.test(DOB);\n}\nexport function validateParentalPin(parentalPin) {\n  var pinRegex = /^\\d{4}$/;\n  return pinRegex.test(parentalPin);\n}\nexport function validatePassword(password, confirmPassword) {\n  var errors = [];\n  if (password.length < 6) {\n    errors.push('Password must be at least 6 characters long.');\n  }\n  var capitalRegex = /[A-Z]/;\n  if (!capitalRegex.test(password)) {\n    errors.push('Password must contain at least one uppercase letter.');\n  }\n  var specialRegex = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;\n  if (!specialRegex.test(password)) {\n    errors.push('Password must contain at least one special character.');\n  }\n  var numberRegex = /[0-9]/;\n  if (!numberRegex.test(password)) {\n    errors.push('Password must contain at least one number.');\n  }\n  if (password !== confirmPassword) {\n    errors.push('Passwords do not match.');\n  }\n  return errors;\n}\nexport function validateCardNumber(cardNumber) {\n  var cardNumberRegex = /^[0-9]{16}$/;\n  return cardNumberRegex.test(cardNumber);\n}\nexport function validateCardExpiration(expirationDate) {\n  if (!isValid(parseISO(expirationDate))) {\n    return 'Invalid expiration date format. Use YYYY-MM-DD.';\n  }\n  var today = new Date();\n  var _expirationDate$split = expirationDate.split('-').map(Number),\n    _expirationDate$split2 = _slicedToArray(_expirationDate$split, 2),\n    year = _expirationDate$split2[0],\n    month = _expirationDate$split2[1];\n  if (year < today.getFullYear() || year === today.getFullYear() && month < today.getMonth() + 1) {\n    return 'Card has expired.';\n  }\n  return null;\n}\nexport function validateCVV(cvv) {\n  var cvvRegex = /^[0-9]{3,4}$/;\n  return cvvRegex.test(cvv);\n}","map":{"version":3,"names":["isValid","parseISO","validateEmail","email","emailRegex","test","validateFirstName","firstName","nameRegex","validateLastName","lastName","validateDOB","DOB","dobRegex","validateParentalPin","parentalPin","pinRegex","validatePassword","password","confirmPassword","errors","length","push","capitalRegex","specialRegex","numberRegex","validateCardNumber","cardNumber","cardNumberRegex","validateCardExpiration","expirationDate","today","Date","_expirationDate$split","split","map","Number","_expirationDate$split2","_slicedToArray","year","month","getFullYear","getMonth","validateCVV","cvv","cvvRegex"],"sources":["C:/Users/tcdin/Desktop/BabyUniversity/front-end/validation.js"],"sourcesContent":["import { isValid, parseISO } from 'date-fns';\r\nexport function validateEmail(email) {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\nexport function validateFirstName(firstName) {\r\n  const nameRegex = /^[a-zA-Z]+$/;\r\n  return nameRegex.test(firstName);\r\n}\r\nexport function validateLastName(lastName) {\r\n  const nameRegex = /^[a-zA-Z]+$/;\r\n  return nameRegex.test(lastName);\r\n}\r\n\r\n\r\nexport function validateDOB(DOB) {\r\n  const dobRegex = /^(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[0-2])\\/\\d{4}$/;\r\n  return dobRegex.test(DOB);\r\n}\r\n\r\n \r\n\r\n\r\nexport function validateParentalPin(parentalPin) {\r\n  const pinRegex = /^\\d{4}$/;\r\n  return pinRegex.test(parentalPin);\r\n}\r\n\r\nexport function validatePassword(password, confirmPassword) {\r\n  const errors = [];\r\n\r\n  // Ensure password is at least 6 characters long\r\n  if (password.length < 6) {\r\n    errors.push('Password must be at least 6 characters long.');\r\n  }\r\n\r\n  const capitalRegex = /[A-Z]/;\r\n  if (!capitalRegex.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter.');\r\n  }\r\n\r\n  const specialRegex = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;\r\n  if (!specialRegex.test(password)) {\r\n    errors.push('Password must contain at least one special character.');\r\n  }\r\n\r\n  const numberRegex = /[0-9]/;\r\n  if (!numberRegex.test(password)) {\r\n    errors.push('Password must contain at least one number.');\r\n  }\r\n\r\n  if (password !== confirmPassword) {\r\n    errors.push('Passwords do not match.');\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function validateCardNumber(cardNumber) {\r\n  const cardNumberRegex = /^[0-9]{16}$/;\r\n  return cardNumberRegex.test(cardNumber);\r\n}\r\n\r\nexport function validateCardExpiration(expirationDate) {\r\n  if (!isValid(parseISO(expirationDate))) {\r\n    return 'Invalid expiration date format. Use YYYY-MM-DD.';\r\n  }\r\n\r\n  const today = new Date();\r\n  const [year, month] = expirationDate.split('-').map(Number);\r\n\r\n  if (year < today.getFullYear() || (year === today.getFullYear() && month < today.getMonth() + 1)) {\r\n    return 'Card has expired.';\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function validateCVV(cvv) {\r\n  const cvvRegex = /^[0-9]{3,4}$/;\r\n  return cvvRegex.test(cvv);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}